apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
//apply plugin: 'checkstyle'

defaultTasks 'distTar'

repositories {
    mavenCentral()
    flatDir {
        dirs "."
    }

    flatDir {
        dirs "chipster-dist"
    }
}

distTar { 
	// to get .tar.gz instead of .tgz		
     archiveExtension = "tar.gz" 
     compression = Compression.GZIP 
} 


//test {
//    testLogging.showStandardStreams = true
//}

// option to set java version on command line
// ./gradlew -P javaVersion=8
java {
    ext.javaVersion = project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : '21'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

application {
    //mainClass = "fi.csc.chipster.toolbox.ToolboxService"
    mainClass = "fi.csc.chipster.rest.ServerLauncher"
}

jar { 
	exclude 'log4j2-test.xml' 
} 

// use log4j2.xml when running
sourceSets {
  main {
    resources {
      exclude 'log4j2-test.xml'
    }
  }
}
  

run {
    standardInput = System.in
}


//checkstyle {
//    configFile = 'config/checkstyle/google_checks.xml' as File
//    ignoreFailures = true
//}

//tasks.withType(Checkstyle) {
//    include "fi/csc/chipster/toolbox/**"
//}

// allow tests to be run on command line with "./gradlew [ cleanTest ] test [ --info ]"
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        // events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task checkTools(type: JavaExec) {
  dependsOn classes
  classpath sourceSets.test.runtimeClasspath
  mainClass = "fi.csc.chipster.toolbox.ToolboxLoadTest"
}


dependencies {

	// logging
	// stay in 2.+ , because 3.0.0-beta1 is compiled with Java 17 
    implementation "org.apache.logging.log4j:log4j-api:2.+"
    implementation "org.apache.logging.log4j:log4j-core:2.+"
    implementation "org.apache.logging.log4j:log4j-jul:2.+"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.+"

    // jersey
    implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:3.1.10"
    implementation "org.glassfish.jersey.inject:jersey-hk2:3.1.10"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:3.1.10"
    implementation "org.glassfish.jersey.ext:jersey-bean-validation:3.1.10" // @NonNull needs this 
        
    // Jersey in Jetty (session-worker)            
    implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:3.1.10"  
    
    // jetty for session-worker servlet
    implementation "org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.23"
    implementation "org.eclipse.jetty:jetty-server:12.0.23"

    // jetty client for file downloads with specific HTTP, cipher or TLS versions
    implementation "org.eclipse.jetty:jetty-client:12.0.23"
    implementation "org.eclipse.jetty.http2:jetty-http2-client:12.0.23"
    implementation "org.eclipse.jetty.http2:jetty-http2-client-transport:12.0.23"

    // websockets 
    // API 2.1.0 == ee10
    implementation "jakarta.websocket:jakarta.websocket-api:2.2.0"
    implementation "org.eclipse.jetty.ee10.websocket:jetty-ee10-websocket-jakarta-server:12.0.23"
    
    // cache settings in web-server
    implementation "org.eclipse.jetty:jetty-rewrite:12.0.23"    
    
        
    // jackson
	implementation "com.fasterxml.jackson.core:jackson-core:2.19.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.2"
    
    // config files
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.2"
	
    // hibernate
    implementation "org.hibernate.orm:hibernate-core:7.0.9.Final"
    implementation "org.hibernate.orm:hibernate-c3p0:7.0.9.Final"
    // schema export
    implementation "org.hibernate.orm:hibernate-ant:7.0.9.Final"
    implementation "org.postgresql:postgresql:+"
    
    // flyway
    implementation "org.flywaydb:flyway-core:11.+"
    implementation "org.flywaydb:flyway-database-postgresql:11.+"

    
    // S3StorageClient and db backups
    /*
    * Starting from v2.30.0 aws-sdk calculates a checksum:
    * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/s3-checksums.
    * html
    * 
    * Radosgw doesn't like it and reponds with XAmzContentSHA256Mismatch, even if
    * we ask aws-sdk to calculate SHA256 with
    * checksumAlgorithm(ChecksumAlgorithm.SHA256).
    * 
    * We could calculate the checksum beforehand, but then we would have to use
    * smaller this.maxPartSize, which would lower the throughput.

    * Setting checksumAlgorithm("") works for single-part uploads, but not for multipart.
    */
    implementation "software.amazon.awssdk:s3:2.29.51"
    implementation "software.amazon.awssdk:s3-transfer-manager:2.29.51"
    implementation "software.amazon.awssdk.crt:aws-crt:0.33.7"


	// other
    implementation "commons-io:commons-io:+"
    implementation "org.apache.commons:commons-text:+"
    implementation "commons-codec:commons-codec:+"
    
    // rxJava
    implementation "io.reactivex.rxjava3:rxjava:3.+"
    
    implementation "com.sun.mail:javax.mail:+"
    
    // tsv parser
    implementation "com.univocity:univocity-parsers:+"
    
    // OpenID Connect
    implementation "com.nimbusds:oauth2-oidc-sdk:+"
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:+',
    		'org.bouncycastle:bcpkix-jdk15on:+'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:+',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:+'
            
    // Chipster Java tools
	implementation "com.github.samtools:htsjdk:2.6.1"
 
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
